# -*- coding: utf-8 -*-
"""text extract.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g3vEYXHchgBPPR77ZRcd9ruBWhoz_iVn
"""

!pip install ultralytics
!pip install opencv-python matplotlib

from ultralytics import YOLO

model=YOLO('/content/yolov8s_34 (1).pt')
result=model.predict('/content/test4.jpg')
result[0].show()

print(result[0].boxes.cls)
print(result[0].boxes.cls.tolist())
print(class_names)
print(bread_counts.items())

from collections import Counter

result = model.predict('/content/test4.jpg')[0]
detected_classes = result.boxes.cls.tolist()    # 탐지한 객체의 클래스 ID를 리스트 형식으로 반환 →[4.0, 5.0, 2.0, 2.0, 1.0]

class_names = result.names   # {0:'bagel', 1:'croisssant',3:'pizzabread'...}
detected_breads = [class_names[int(cls_id)] for cls_id in detected_classes]
bread_counts = Counter(detected_breads)    # 각 빵의 개수 계산

result.show()

print("\n🥐구매하시는 빵은 다음과 같습니다.🥐\n")
print('      빵  〰️〰️  수량')
for bread, count in bread_counts.items():
    print(f"- {bread}: {count}개")

from collections import Counter

class_mapping = {"bagel": "베이글", "croissant": "크루아상", "custardcreambread": "커스타드크림빵", "pizzabread": "피자빵",
                 "redbeanbread": "팥빵", "saltbread": "소금빵", "soboro": "소보로빵", "whitebread": "식빵"
}

result = model.predict('/content/test4.jpg')[0]
detected_classes = result.boxes.cls.tolist()    # 탐지한 객체의 클래스를 리스트 형식으로 반환 →[4.0, 5.0, 2.0, 2.0, 1.0]

detected_breads = [class_mapping[result.names[int(cls_id)]] for cls_id in detected_classes]
bread_counts = Counter(detected_breads)    # 각 빵의 개수 계산

result.show()

print("\n🥐구매하시는 빵은 다음과 같습니다.🥐\n")
print('      빵  〰️〰️  수량')
for bread, count in bread_counts.items():
    print(f"- {bread}: {count}개")

